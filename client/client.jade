//- ---------- -//
//-   GLOBAL   -//
//- ---------- -//

//- Head
head
  meta(http-equiv="X-UA-Compatible", content="IE=Edge")
  meta(charset="UTF-8")
  meta(name="viewport", content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no")
  meta(name="application-name", content="SpaiCheck")
  meta(name="description", content="SpaiCheck helps you catch spais!")
  title Spaicheck
//- Body
body
  .flash-messages
    +flashMessages

//- --------- -//
//-  HELPERS  -//
//- --------- -//

//- Error
template(name="error")
  .tmpl-error
    span Whoops! We couldn't find what you were looking for...

//- Loading
template(name="loading")
  .tmpl-loading
    span Loading...

//- --------- -//
//-  LAYOUTS  -//
//- --------- -//

//- Landing
template(name="landing")
  header
    img.ui.image(src="logo.png")
    +loginButtons
  main
    a(href="{{pathFor 'home'}}")
      h2 Check for Spais!
  footer.ui.bottom.fixed.fluid.one.item.menu
    .item.header Running on Meteor

//- Dashboard
template(name="dashboard")
  #page-wrapper
    +Template.dynamic(template=head)
    .bg-img
      h3 | 
    +Template.dynamic(template=main)
    footer.ui.bottom.fixed.fluid.one.item.menu
      ui.two.column.grid
        .right.aligned.column
          span Running on
        .column
          img.ui.small.image(src="/meteor.png")

//- Dashboard Header
template(name="header")
  header.ui.fixed.top.borderless.menu
    .left.menu.logo
      a.item(href="{{pathFor 'home'}}")
        img.ui.small.image(src="/logo.png")
        i.icons
          i.large.spy.icon
          i.huge.search.icon.grey
    .right.menu
      .ui.dropdown.item
        if currentUser
          img.ui.avatar.image(src="https://image.eveonline.com/Character/#{currentCharId}_64.jpg")
        else
          img.ui.avatar.image(src="/anon.jpg")
        span.user-name &nbsp;#{currentCharName}
        i.dropdown.icon
        .menu
          a.item
            i.user.icon
            span Profile
          a#settingsButton.item
            i.settings.icon
            span Settings
          a.item.logout-button
            i.log.out.icon
            span Log out
  #settings.ui.modal
    .header
      .ui.two.column.grid
        .column
          i.settings.icon
          span Settings
        .right.aligned.column
          #settingsSaved.ui.green.label All settings saved
    .content
      .ui.two.column.grid.container
        .row
          .column
            h4#errTimeChk.ui.header
              | Time Format
            .ui.buttons
              a#eveTimeBtn.ui.button
                | EVE
              a#friendlyTimeBtn.ui.button
                | Friendly
          .column
            h4.ui.header
              | Example
            span {{timeAgo}}

//- ---------- -//
//-   ROUTES   -//
//- ---------- -//

//- Home
template(name="home")
  main.ui.one.column.fluid.grid
    .column
      .ui.raised.tertiary.green.inverted.segment
        h2.ui.header.inverted API Key Import
        .ui.two.column.stackable.grid
          .ui.five.wide.column
            +addKey
          .ui.eleven.wide.column
            +errorDisplay
    .column
      .ui.raised.tertiary.blue.inverted.segment
        h2.ui.header.inverted Key Management
        +keyDisplay

//- addKey
template(name="addKey")
  .ui.top.attached.segment
    .ui.two.column.grid
      .middle.aligned.column
        h3.ui.header Add New Key
      .right.aligned.column
        i.big.icons
          i.privacy.icon.yellow
          i.corner.add.circle.icon.green
  .ui.bottom.attached.section.segment
    //- See https://github.com/aldeed/meteor-autoform#component-and-helper-reference for info on attributes used here
    +autoForm schema="AddKeyFormSchema" collection="Keys" id="insertKeyForm" type="method" meteormethod="addKeySubmit" validation="none" resetOnSuccess="true"
      .ui.fluid.input
        +afFieldInput name="keyID" type="text" placeholder="Key ID"
      {{afFieldMessage name="keyID"}}
      .ui.fluid.input
        +afFieldInput name="vCode" type="text" placeholder="Verification Code"
      {{afFieldMessage name="vCode"}}
      button(type="submit" class="ui fluid button blue") Add Key

//- errorDisplay
template(name="errorDisplay")
  .ui.top.attached.segment
    .ui.two.column.grid
      .middle.aligned.column
        h3.ui.header Import Errors
      .right.aligned.column
        i.flag.icon.big.red
  #error-display.ui.bottom.attached.section.segment
    .ui.accordion
      each errors
        if @index != 0
          .ui.divider
        .title
          .ui.stackable.grid
            .twelve.wide.column
              i.dropdown.icon
              span Key ##{keyID} #[span(style="color: #ff0000") ({{keyErrorCount log}})]
            .right.aligned.four.wide.column
              a.ui.mini.compact.basic.button.rm-err
                i.large.red.remove.circle.icon
                | Discard
        .content
          .ui.cards
            each errorMessage in log
              .card
                .content
                  .header
                    | {{prettyDate errorMessage.createdAt}}
                  .meta
                    | {{timeAgo errorMessage.createdAt}}
                    .right.floated
                      .ui.horizontal.red.label
                        | #{errorMessage.errorType}
                  .description
                    | #{errorMessage.message}

//- keyDisplay
template(name="keyDisplay")
  .ui.top.attached.segment
    .ui.two.column.grid
      .middle.aligned.four.wide.column
        h3.ui.header Explorer
      .right.aligned.twelve.wide.column
        button.ui.small.button.green.validate-button Validate Keys
        i.find.icon.big
  #key-display.ui.bottom.attached.section.segment
    .ui.accordion
      each keys
        if @index != 0
          .ui.divider
        .title
          .ui.stackable.grid
            .six.wide.column
              i.dropdown.icon
              | {{{insertColorMarkerHlp status}}} Key ##{keyID}
            .ten.wide.right.aligned.column
              a.ui.mini.compact.button.blue.toggle.detailsBtn
                i.large.info.circle.icon.inverted
                | Details
              a(class="ui #{hasChanges keyID} labeled button changesBtn")
                a.ui.button.mini.compact.button.yellow
                  i.large.warning.sign.icon.inverted
                  | Changes
                a.ui.basic.label
                  | #{numChanges keyID}
              a.ui.mini.compact.button.red.rm-key
                i.large.inverted.trash.icon
                | Delete
        .content
          .changes
            +changeDetails
          .details
            +keyDetails

template(name="changeDetails")
  each keyChanges keyID
    each log
      .log
        .ui.top.attached.segment #{prettyDate createdAt}
        each changes
          .ui.attached.segment.changeDetail
            p
              | {{{parseChangeHlp changeType severity oldValueStr newValueStr oldValueObj newValueObj context}}}
    | #{addBottomClass log}
    
template(name="keyDetails")
  ul Key #{keyID}
    li Verification Code: #{vCode}
    li Created At: #{createdAt}
    ul Characters:
      with resultBody
        | {{{parseCharacters}}}
